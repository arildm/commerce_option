<?php

/**
 * Implements hook_menu().
 */
function commerce_option_menu() {
  $items['admin/commerce/products/option-sets/%commerce_option_set/delete'] = array(
    'title' => 'Delete commerce option set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_option_set_delete'),
    'access arguments' => array('administer option sets'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_option.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_option_menu_alter(&$items) {
  $items['admin/commerce/products/option-sets']['type'] = MENU_LOCAL_TASK;
  $items['admin/commerce/products/option-sets']['title'] = t('Option sets');
}

/**
 * Implements hook_entity_info().
 *
 * This function provides information about the option entities.
 */
function commerce_option_entity_info() {
  $return = array();

  $return['commerce_option'] = array(
    'label' => t('Commerce Option'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'commerce_option',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'option_id',
      'bundle' => 'set_id',
      'label' => 'set_id',
    ),
    'access callback' => 'commerce_option_set_access',
    'module' => 'commerce_option',
    'bundle keys' => array(
      'bundle' => 'set_id',
    ),
    'bundles' => array(),
    'view modes' => array(
      'attribute_view' => array(
        'label' => t('Attribute View'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $return['commerce_option_set'] = array(
    'label' => t('Commerce Option Set'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'commerce_option_set',
    'exportable' => TRUE,
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'set_id',
      'label' => 'name',
      'name' => 'set_id',
    ),
    'bundle of' => 'commerce_option',
    'access callback' => 'commerce_option_set_access',
    'module' => 'commerce_option',
    'bundles' => array(),
    'admin ui' => array(
      'path' => 'admin/commerce/products/option-sets',
      'file' => 'commerce_option.admin.inc',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function commerce_option_entity_property_info() {
  $info = array();

  $info['commerce_option']['properties'] = array(
    'option_id' => array(
      'type' => 'integer',
      'label' => t('Option id'),
      'schema field' => 'option_id',
    ),
    'set_id' => array(
      'type' => 'text',
      'label' => t('Set id'),
      'schema field' => 'set_id',
      'setter callback' => 'entity_property_verbatim_set',
      'required' => TRUE,
    ),
    'product_id' => array(
      'type' => 'integer',
      'label' => t('Product id'),
      'schema field' => 'product_id',
      'required' => TRUE,
    ),
    'field_name' => array(
      'type' => 'text',
      'label' => t('Field name'),
      'schema field' => 'field_name',
      'required' => TRUE,
    ),
    'line_item_id' => array(
      'type' => 'integer',
      'label' => t('Line item id'),
      'schema_field' => 'line_item_id',
      'setter callback' => 'entity_property_verbatim_set',
      'required' => TRUE,
    ),
    'created' => array(
      'type' => 'date',
      'label' => t('Created date'),
      'schema_field' => 'created',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'changed' => array(
      'type' => 'date',
      'label' => t('Changed date'),
      'schema_field' => 'changed',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );

  $info['commerce_option_set']['properties'] = array(
    'set_id' => array(
      'type' => 'text',
      'label' => t('Machine name'),
      'schema field' => 'set_id',
      'required' => TRUE,
    ),
    'name' => array(
      'type' => 'text',
      'label' => t('Human-readable name'),
      'schema field' => 'name',
      'required' => TRUE,
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify commerce set bundles to avoid a recursion, as loading
 * the commerce coupon types needs the entity info too.
 */
function commerce_option_entity_info_alter(&$entity_info) {
  foreach (commerce_option_set_load_multiple(FALSE) as $type => $info) {
    $entity_info['commerce_option']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/commerce/products/option-sets/manage/%commerce_option_set',
        'real path' => 'admin/commerce/products/option-sets/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer option sets'),
      ),
    );
  }
}

/**
 * Check if the given operation is allowed.
 */
function commerce_option_set_access($op, $type = NULL, $account = NULL) {
  return user_access('administer option sets', $account);
}

/**
 * Implements hook_permission().
 */
function commerce_option_permission() {
  $permissions = array(
    'administer option sets' => array(
      'title' => t('Administer Option Sets'),
      'description' => t('Allow users to manage option sets.'),
    ),
  );

  return $permissions;
}

/**
 * Load multiple commerce options.
 *
 * @param $option_ids
 *   An array of entity IDs or FALSE to return all entities.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of test entity objects, indexed by option_id.
 */
function commerce_option_load_multiple($option_ids, $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_option', $option_ids, $conditions, $reset);
}

/**
 * Load a commerce option.
 *
 * @param $option_id
 *   Integer specifying the option id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $option object or FALSE if it cannot be loaded.
 *
 * @see commerce_option_load_multiple()
 */
function commerce_option_load($option_id, $reset = FALSE) {
  $ids = (isset($option_id) ? array($option_id) : array());
  $option = commerce_option_load_multiple($ids, array(), $reset);

  return $option ? reset($option) : FALSE;
}

/**
 * Load all options associated with a line item.
 *
 * @param $line_item_id
 *  Line item id.
 * @return Array of options
 */
function commerce_option_load_by_line_item($line_item_id) {
  $options = db_select('commerce_option', 'o')
    ->fields('o', array('option_id'))
    ->condition('line_item_id', $line_item_id, '=')
    ->execute();
  $option_ids = array();

  foreach ($options as $option) {
    $option_ids[] = $option->option_id;
  }

  return commerce_option_load_multiple($option_ids);
}

/**
 * Save a commerce option.
 */
function commerce_option_save($option) {
  return entity_save('commerce_option', $option);
}

/**
 * Load multiple commerce option sets.
 *
 * @param $option_set_ids
 *   An array of entity IDs or FALSE to return all entities.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of test entity objects, indexed by option_id.
 */
function commerce_option_set_load_multiple($option_set_ids, $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_option_set', $option_set_ids, $conditions, $reset);
}

/**
 * Load a commerce option set.
 *
 * @param $set_id
 *   String specifying the option id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $option object or FALSE if it cannot be loaded.
 *
 * @see commerce_option_set_load_multiple()
 */
function commerce_option_set_load($set_id, $reset = FALSE) {
  $ids = (isset($set_id) ? array($set_id) : array());
  $option_set = commerce_option_set_load_multiple($ids, array(), $reset);

  return $option_set ? reset($option_set) : FALSE;
}

/**
 * Save a commerce option set.
 */
function commerce_option_set_save($option_set) {
  return entity_save('commerce_option_set', $option_set);
}

/**
 * Implements hook_entity_delete().
 *
 * Delete all options, when the associated line item is deleted.
 */
function commerce_option_entity_delete($entity, $type) {
  if ($type != 'commerce_line_item') {
    return;
  }

  $options = commerce_option_load_by_line_item($entity->line_item_id);
  if (empty($options)) {
    return;
  }

  // Delete data in field tables
  foreach ($options as $option) {
    field_attach_delete('commerce_option', $option);
  }

  // Delete entries from commerce_option table.
  entity_delete_multiple('commerce_option', array_keys($options));
}

/**
 * Implements hook_attribute_field().
 */
function commerce_option_attribute_field(&$element, &$line_item) {

  $element['options'] = array();

  $options = commerce_option_load_by_line_item($line_item->line_item_id);

  foreach ($options as $option) {
    field_attach_prepare_view('commerce_option', array($option->option_id => $option), 'attribute_view');
    $option_view = field_attach_view('commerce_option', $option, 'attribute_view');
    $element['options'][] = array(
      '#markup' => drupal_render($option_view),
    );
  }
}
